'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

var _imageDifference = require('./imageDifference');

var _imageDifference2 = _interopRequireDefault(_imageDifference);

var _display = require('./display');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /* eslint-disable no-console */

_commander2.default.version(_package2.default.version).description('Create image differential between two images').usage('[options] <actual-filename> <expected-filename> [diff-filename]').action((() => {
  var _ref = _asyncToGenerator(function* (actualFilename, expectedFilename, diffFilenameArgs, command) {
    let options = command;
    let diffFilename = diffFilenameArgs;

    // If there is no program, then assume diffFilename was left out
    if (command === undefined) {
      options = diffFilenameArgs;
      diffFilename = undefined;
    }

    let difference;

    try {
      difference = yield (0, _imageDifference2.default)(_extends({
        actualFilename,
        diffFilename,
        expectedFilename
      }, options));
    } catch (error) {
      (0, _display.displayError)('Sorry an error happened:');

      console.error(_chalk2.default.bold.red(error.stack));
      process.exit(1);
    }

    if (difference.value === 0) {
      (0, _display.displaySuccess)('No difference');
    } else {
      (0, _display.displayError)(`A difference was detected (value: ${difference.value}, percentage: ${difference.value / (difference.width * difference.height)})`);
      process.exit(1);
    }
  });

  return function (_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
})());

if (!process.argv.slice(3).length) {
  _commander2.default.outputHelp();
} else {
  _commander2.default.parse(process.argv);
}